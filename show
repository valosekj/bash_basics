#!/bin/bash

# Function for printing messeage or command's output in various ways
# USAGE:
#    show "messeage" [option]
# OPTIONS:
#       [no option] - verbose mode on (print output to both terminal and to log)
#       v - turn off verbose (print messeage only to log)
#       e - error (print messeage in red color to both terminal and log and exit)
#       w - warning (print messeage in red color to both terminal and log but stil continue)
#       y - print standard messeage in yellow color
#       g - print standard messeage in green color
#       t - switch off time mark
# EXAMPLE USAGE:
#       show "Hello world" g    - print "Hello world" in green color to both terminal and log with time stamp
#       show "Hello world" gt   - print "Hello world" in green color to both terminal and log without time stamp
#       show "Hello world" v    - print "Hello world" only to log (verbose off) with time stamp
#       show "Hello world" vt    - print "Hello world" only to log (verbose off) without time stamp

# IMPORTANT: This funtion collaborates with exe function

# Jan Valosek, fMRI laboratory, Olomouc, 2019-2020. Inspired by Pavel Hok
# VER=27-12-2019

# Colors definition
red=`tput setaf 1`
yellow=`tput setaf 3`
green=`tput setaf 6`
normal=$(tput sgr0)


# Function telling to parent process that something happened (e.g. file does not exist)
# Function finds parent process ID (ppid) and set user defined signal (SIGUSR1)
# Inspiration:
#     https://stackoverflow.com/questions/16215196/bash-exit-parent-script-from-child-script
trap_exit()
{
    OS_name=$(uname -a | awk '{print $1}')  # get OS name (Darwin or Linux)

    if [[ $OS_name == "Linux" ]]; then
        kill -SIGUSR1 `ps --pid $$ -o ppid=`;exit   # Find parent process ID (ppid) and set user defined signal (SIGUSR1)
    elif [[ $OS_name == "Darwin" ]]; then
        kill -SIGUSR1 `ps $$ -o ppid=`;exit         # Find parent process ID (ppid) and set user defined signal (SIGUSR1)
    fi
}

# Switch off time mark
if [[ $2 =~ "t" ]]; then

    print_date=""

else

    print_date="$(date "+%T_%Y-%m-%d"): "

fi


# ERROR - print messeage in red color to both terminal and log with time stamp and exit
if [[ $2 =~ "e" ]]; then

        echo -e "${red}${print_date}ERROR: $1\nExiting...${normal}" 1>&2
        trap_exit

# WARNING - print messeage in red color to both terminal and log  with time stamp but stil continue
elif [[ $2 =~ "w" ]]; then

        echo -e "${red}${print_date}WARNING: $1\nContinuing...${normal}" 1>&2

# Standard messeage in yellow color to both terminal and log with time stamp
elif [[ $2 =~ "y" ]]; then

        echo -e "${yellow}${print_date}${1}${normal}" 1>&2

# Standard messeage in green color to both terminal and log with time stamp
elif [[ $2 =~ "g" ]]; then

        echo -e "${green}${print_date}${1}${normal}" 1>&2

# NO OPTION - output from command or message to screen and to log (= verbose mode)
elif [[ ! ( $2 =~ "v" ) ]]; then

        # Messeage
        if [[ "$1" != "--stdin" ]]; then
                echo -e "${print_date}${1}"
        # Command
        else
            while read line; do
                    echo -e "$line"
            done
        fi

# TURN OFF verbose - output from command or messeage only to log
elif [[ $2 =~ "v" ]]; then

    if [[ $LOGPATH == "" ]]; then
        echo -e "Path to log is empty. Fix it (e.g. by setting LOGPATH variable as global in your script (export \$LOGPATH=\"log.txt\")).\nExiting..."
        trap_exit
    fi

        # Messeage
        if [[ "$1" != "--stdin" ]]; then
                echo -e "${print_date}${1}" >> $LOGPATH
        # Command
        else
                while read line; do
                        echo -e "$line" >> $LOGPATH
                done
        fi

#    elif [[ "$1" = "--stdin" ]]; then
#            while read line; do
#                    echo -e $line >/dev/null
#            done
fi
